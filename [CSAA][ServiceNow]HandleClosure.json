{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "clean": true,
            "code_block": "from datetime import datetime",
            "description": "",
            "hash": "35df1ee23acc6a2c109f4394ba47004b7bf40a21",
            "joint": {
                "cells": [
                    {
                        "0": "S",
                        "1": "T",
                        "2": "A",
                        "3": "R",
                        "4": "T",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "ref-x": 33,
                                "ref-y": 8,
                                "text": "START"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "ref-x": 13,
                                "xlink:href": "/inc/coa/img/block_icon_start.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_start(container):\n    phantom.debug('on_start() called')\n    \n    # call 'get_current_time' block\n    get_current_time(container=container)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "ca4687e5-c1e8-4deb-9819-d62b87828e6f",
                        "inPorts": [],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 23,
                        "line_start": 15,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 1,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 240,
                            "y": 100
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "START",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 1
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "8325c4d5-c7b7-4b71-b5c1-f1d2019815b5",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "ca4687e5-c1e8-4deb-9819-d62b87828e6f",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "1132cd9c-f6f4-465a-bb3b-ab2d57872dd9",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 3
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "9ffab1bd-0d23-4037-9dbf-f80d5d718236",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "1132cd9c-f6f4-465a-bb3b-ab2d57872dd9",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "b48c867d-98e9-45fb-886e-e1fc0b9bf27b",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 6
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "get current time"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def get_current_time(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('get_current_time() called')\n    \n    input_parameter_0 = \"\"\n\n    get_current_time__current_time = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    get_current_time__current_time = int(datetime.now().timestamp())\n    phantom.debug(get_current_time__current_time)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='get_current_time:current_time', value=json.dumps(get_current_time__current_time))\n    get_containers_to_close(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 10,
                        "custom_callback": "",
                        "custom_code": "def get_current_time(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('get_current_time() called')\n    \n    input_parameter_0 = \"\"\n\n    get_current_time__current_time = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    get_current_time__current_time = int(datetime.now().timestamp())\n    phantom.debug(get_current_time__current_time)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='get_current_time:current_time', value=json.dumps(get_current_time__current_time))\n\n    return",
                        "custom_join": "",
                        "custom_name": "get current time",
                        "description": "",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "1132cd9c-f6f4-465a-bb3b-ab2d57872dd9",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 46,
                        "line_start": 23,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "",
                        "number": 1,
                        "order": 2,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "current_time"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 380,
                            "y": 80
                        },
                        "previous_function": "",
                        "previous_name": "get_current_time",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    get_current_time__current_time = int(datetime.now().timestamp())\n    phantom.debug(get_current_time__current_time)\n\n",
                        "warn": false,
                        "z": 8
                    },
                    {
                        "0": "E",
                        "1": "N",
                        "2": "D",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".title": {
                                "text": "END"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_end.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_finish(container, summary):\n    phantom.debug('on_finish() called')\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "2752c242-6011-464e-82d7-f7c6c3fcc116",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 149,
                        "line_start": 136,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 5,
                        "outPorts": [],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1100,
                            "y": 100
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "END",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 10
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "d20ab7a0-f787-4312-99b4-a3e52f4b9318",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "b48c867d-98e9-45fb-886e-e1fc0b9bf27b",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "3525c73f-9711-4873-a19f-1c7e79dc6dac",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 11
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "get containers to close"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def get_containers_to_close(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('get_containers_to_close() called')\n    \n    get_current_time__current_time = json.loads(phantom.get_run_data(key='get_current_time:current_time'))\n\n    get_containers_to_close__to_close = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    current_time = int(get_current_time__current_time)\n    \n    base_url = phantom.get_rest_base_url()\n    phantom.debug(base_url)\n    \n    filtered_artifacts_url = f'{base_url}artifact?_filter_cef__autoclosetime__isnull=False&page_size=0'\n    \n    response = phantom.requests.get(filtered_artifacts_url, verify=False)\n    response_json = response.json()\n    phantom.debug(response_json)\n    \n    # List of containers to close and associated autoclose artifact number\n    to_close = []\n    \n    for artifact in response_json['data']:\n        artifact_id = artifact['id']\n        container_id = artifact['container']\n        autoclosetime = artifact['cef'].get('autoclosetime', None)\n        if not autoclosetime:\n            continue\n            \n        closetime = int(autoclosetime)\n        \n        if closetime < current_time:\n            phantom.debug(f'Going to close SNOW incident for container {container_id} due to autoclose artifact {artifact_id}')\n            to_close.append(\n                {\n                    'container_id': container_id,\n                    'artifact_id': artifact_id\n                }\n            )\n                \n    phantom.debug(to_close)\n    get_containers_to_close__to_close = to_close\n    ############################################\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='get_containers_to_close:to_close', value=json.dumps(get_containers_to_close__to_close))\n    call_close_playbook(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "customCodeEndLineOffset": 7,
                        "customCodeStartLine": 10,
                        "custom_callback": "",
                        "custom_code": "def get_containers_to_close(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('get_containers_to_close() called')\n    \n    get_current_time__current_time = json.loads(phantom.get_run_data(key='get_current_time:current_time'))\n\n    get_containers_to_close__to_close = None\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    current_time = int(get_current_time__current_time)\n    \n    base_url = phantom.get_rest_base_url()\n    phantom.debug(base_url)\n    \n    filtered_artifacts_url = f'{base_url}artifact?_filter_cef__autoclosetime__isnull=False&page_size=0'\n    \n    response = phantom.requests.get(filtered_artifacts_url, verify=False)\n    response_json = response.json()\n    phantom.debug(response_json)\n    \n    # List of containers to close and associated autoclose artifact number\n    to_close = []\n    \n    for artifact in response_json['data']:\n        artifact_id = artifact['id']\n        container_id = artifact['container']\n        autoclosetime = artifact['cef'].get('autoclosetime', None)\n        if not autoclosetime:\n            continue\n            \n        closetime = int(autoclosetime)\n        \n        if closetime < current_time:\n            phantom.debug(f'Going to close SNOW incident for container {container_id} due to autoclose artifact {artifact_id}')\n            to_close.append(\n                {\n                    'container_id': container_id,\n                    'artifact_id': artifact_id\n                }\n            )\n                \n    phantom.debug(to_close)\n    get_containers_to_close__to_close = to_close\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key='get_containers_to_close:to_close', value=json.dumps(get_containers_to_close__to_close))\n\n    return",
                        "custom_join": "",
                        "custom_name": "get containers to close",
                        "description": "",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "b48c867d-98e9-45fb-886e-e1fc0b9bf27b",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 101,
                        "line_start": 46,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "Make a rest call to filter for autoclose artifacts. Determine which artifacts have expired time, we will close these via calling the Close playbook",
                        "number": 2,
                        "order": 3,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "to_close"
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "get_current_time:custom_function:current_time"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 620,
                            "y": 80
                        },
                        "previous_function": "",
                        "previous_name": "get_containers_to_close",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    current_time = int(get_current_time__current_time)\n    \n    base_url = phantom.get_rest_base_url()\n    phantom.debug(base_url)\n    \n    filtered_artifacts_url = f'{base_url}artifact?_filter_cef__autoclosetime__isnull=False&page_size=0'\n    \n    response = phantom.requests.get(filtered_artifacts_url, verify=False)\n    response_json = response.json()\n    phantom.debug(response_json)\n    \n    # List of containers to close and associated autoclose artifact number\n    to_close = []\n    \n    for artifact in response_json['data']:\n        artifact_id = artifact['id']\n        container_id = artifact['container']\n        autoclosetime = artifact['cef'].get('autoclosetime', None)\n        if not autoclosetime:\n            continue\n            \n        closetime = int(autoclosetime)\n        \n        if closetime < current_time:\n            phantom.debug(f'Going to close SNOW incident for container {container_id} due to autoclose artifact {artifact_id}')\n            to_close.append(\n                {\n                    'container_id': container_id,\n                    'artifact_id': artifact_id\n                }\n            )\n                \n    phantom.debug(to_close)\n    get_containers_to_close__to_close = to_close\n    ############################################",
                        "warn": false,
                        "z": 16
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".functionBlock": {
                                "text": "call close playbook"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "custom function"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn_grey.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_note_dark_on.svg"
                            }
                        },
                        "block_code": "def call_close_playbook(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('call_close_playbook() called')\n    \n    get_containers_to_close__to_close = json.loads(phantom.get_run_data(key='get_containers_to_close:to_close'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    to_close = get_containers_to_close__to_close\n    phantom.debug(to_close)\n    \n    base_url = phantom.get_rest_base_url()\n    \n    rest_body = {\n        'container_id': None,\n        'playbook_id': 'local/[CSAA][ServiceNow] - Close',\n        'scope': 'all',\n        'run': True\n    }\n    \n    for item in to_close:\n        container_id = item['container_id']\n        phantom.debug(f'Running {rest_body[\"playbook_id\"]} on container container_id')\n        rest_body['container_id'] = container_id\n        \n        response = phantom.requests.post(f'{base_url}playbook_run', json=rest_body, verify=False)\n        phantom.debug(response)\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "customCodeEndLineOffset": 4,
                        "customCodeStartLine": 8,
                        "custom_callback": "",
                        "custom_code": "def call_close_playbook(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('custom_function_3() called')\n    \n    get_containers_to_close__to_close = json.loads(phantom.get_run_data(key='get_containers_to_close:to_close'))\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    to_close = get_containers_to_close__to_close\n    phantom.debug(to_close)\n    \n    base_url = phantom.get_rest_base_url()\n    \n    rest_body = {\n        'container_id': None,\n        'playbook_id': 'local/[CSAA][ServiceNow] - Close',\n        'scope': 'all',\n        'run': True\n    }\n    \n    for item in to_close:\n        container_id = item['container_id']\n        phantom.debug(f'Running {rest_body[\"playbook_id\"]} on container container_id')\n        rest_body['container_id'] = container_id\n        \n        response = phantom.requests.post(f'{base_url}playbook_run', json=rest_body, verify=False)\n        phantom.debug(response)\n        \n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    return",
                        "custom_join": "",
                        "custom_name": "call close playbook",
                        "description": "",
                        "functionBlock": "custom function",
                        "has_custom": true,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "3525c73f-9711-4873-a19f-1c7e79dc6dac",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "legacy": true,
                        "line_end": 136,
                        "line_start": 101,
                        "message": "Configuring now",
                        "name": "custom function",
                        "notes": "For each container to close, call the close playbook",
                        "number": 3,
                        "order": 4,
                        "outPorts": [
                            "out"
                        ],
                        "outputVariables": [
                            {
                                "position": 0,
                                "type": "",
                                "value": ""
                            }
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "get_containers_to_close:custom_function:to_close"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 860,
                            "y": 80
                        },
                        "previous_function": "",
                        "previous_name": "call_close_playbook",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "custom function",
                        "status": "deprecating",
                        "title": "custom function",
                        "type": "coa.FunctionBlock",
                        "userGeneratedCode": "\n    to_close = get_containers_to_close__to_close\n    phantom.debug(to_close)\n    \n    base_url = phantom.get_rest_base_url()\n    \n    rest_body = {\n        'container_id': None,\n        'playbook_id': 'local/[CSAA][ServiceNow] - Close',\n        'scope': 'all',\n        'run': True\n    }\n    \n    for item in to_close:\n        container_id = item['container_id']\n        phantom.debug(f'Running {rest_body[\"playbook_id\"]} on container container_id')\n        rest_body['container_id'] = container_id\n        \n        response = phantom.requests.post(f'{base_url}playbook_run', json=rest_body, verify=False)\n        phantom.debug(response)\n        \n\n",
                        "warn": false,
                        "z": 17
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "3b449f22-ba5f-465b-8de8-7e71492c3432",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "3525c73f-9711-4873-a19f-1c7e79dc6dac",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "2752c242-6011-464e-82d7-f7c6c3fcc116",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 18
                    }
                ]
            },
            "notes": ""
        },
        "python_version": "3",
        "schema": 4,
        "version": "4.10.7.63984"
    },
    "create_time": "2021-12-06T20:07:02.919373+00:00",
    "draft_mode": false,
    "labels": [
        "autoclose_snow"
    ],
    "tags": []
}